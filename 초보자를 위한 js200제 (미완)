5
ex) foo = "bar"
foo는 변수 , bar는 값

6
자바스크립트 코드는 값,변수,연산자,키워드 로 이루어져 있고 이를 통해 문장을 만든다.
문장은 표현식/명령문으로 나뉜다.

7   주석
//    한 문장 주석
/* */ 여러 문장 주석

8
원시타입/참조타입
참조타입 = 객체
객체는 키:값 형태로 이루어진 속성들의 모음
key는 반드시 string

'아 함수도 객체구나'

9
console.debug
console.info
console.warn
console.error

'콘솔 상의 메시지 속성(?) 결정'

10  if
if (표현식)
    명령문
    
11  else,else if
else , else if 는 if 의 결과값이 false 일 때 실행된다.
else if는 if 조건문 외에 추가적으로 조건식을 추가하고 싶을 때 사용

12  switch
switch의 표현식이 case의 값과 일치하면 명령문 실행.
실행 후 break

13  for
for (초기값 ; 조건식 ; 어떤 간격으로) {
            실행할 문장
            }
괄호 안의 내용은 반복문을 어떻게 실행 할 것인지에 대한 것.

14  for in
for (속성명 in 반복 할 대상) {
    }
// ex) for (var item in store)
// 키 정보가 item으로 선언과 동시에 할당된다.

15  while
while(조건식){
    반복하게 될 문장
    }
조건식이 true면 실행, false면 반복 실행 종료.

do-while 반복문
첫 조건식 상관 없이 한 번 무조건 문장 실행, 이후는 동일

16  숫자형
특이하게 숫자는 그냥 숫자 (int float 같은 게 없다.)
Infinity , NaN(=not a number) 같은 게 있다.

17  문자형
별 거 없고 \n을 통해 줄 넘김? 을 할 수 있다.

18  불리언

19  null,undefined
null : 값의 부재 (그러나 typeof로 확인 했을 때 object로 변환 되는데, 이는 js 이슈다.)
undefined : 변수가 정의 됐지만, 할당이 되지 않음.

20  템플릿 문자열
문자열에 변수를 포함 시킬 때 좀 더 직관적이고 편하게 사용하기 위한 기능.
`(억음부호)로 시작하고 끝나며, 변수 부분은 ${변수}로 표시함.
//const string_introduce = "Hi, My name is " + name + ", " + age + " years old, and I'm living in " + address   -일반적인 문자열
//const string_introduce = `Hi, My name is ${name}, ${age} years old, and I'm living in ${address}`             -템플릿 문자열

21 산술 연산자
문자열에 + 사용 가능
산술 등호 연산 가능 
% : 나머지 연산자
** : 거듭제곱 연산자
+/- 단항 양/음수
++/-- 증감 연산자

22 비교 연산자
비교 연산자
    -일치 연산자 : 동등(==), 부등(!=) (동등,부등은 자료형을 바꿔서 비교) , 일치(===), 불일치(!==) (자료형까지 기준에 넣어서 비교)
    -관계 연산자 : >,<,>=,<=
스트링 비교 연산 가능

23 논리 연산자
and && , or || , not !
무조건 False인 것들 : false , 0 , -0, "" , Nan ,null,undefined

24  삼항 연산자
조건문 ? 표현문1 : 표현문2
          true     false
          
25  비트 연산자
비트 연산자
    -비트 논리 연산자 &, ~ , | , ^
    -비트 이동 연산자 << , >> , >>>

어렵다.
not 비트 연사자는 잘 이해가 가지 않는다.
이런게 있다 정도만 일단 이해하자.

26  자료형 변환
5+"1" 은 51이 된다. string을 우선 처리하기 때문이다.
var num= +str; 이런 식으로 스트링을 숫자형 자료로 만들어 버릴 수 있다.

27  배열
배열의 길이 = 요소의 개수 (ex.console.log(arr.length);)
인덱스 = 0부터 시작, []로 지정

28  객체
객체 = 값들을 그룹으로 묶은 데이터 모음.
{key:value} => properties(속성)

JSON : 자바스크립트 객체와 매우 유사한 구조를 지닌 데이터 교환 형식.
'객체 자체는 알맹이가 얼마 없는 것 같다. 그냥 데이터 묶음인 것 같다.'

29 객체2
var family = {
    'address' : 'Seoul',
    members : {} ,
    addFamily : function(age, name , role) {
        this.members[role] = {
            age: age,
            name : name
        };
    },
    getHeadCount : function() {
        return  Object.keys(this.members).length;
    }
};

family.addFamily(30, 'chloe', 'aunt');
family.addFamily(3, 'lyn', 'niece');
family.addFamily(10, 'dangdangi' , 'dog');

var printMembers = function() {
    var members = family.members;
    for (role in members) {
        console.log('role =>' + role + ', name = >' + members[role].name + ', age => ' +members[role].age);
    }
};

printMembers();      //여기까지는 그냥 3개의 속성을 넣고 프린트 하는 것

var members = family.members;
members['nephew'] = {age: 3, name:'hyun'};   //[]를 이용해서 추가
members.niece = {age:5,name:'lyn'};          //. 이용해서 수정 ([]이용해서 수정 가능)
delete members.aunt;                         //. 이용해서 삭제
delete members['dog'];                       //[] 이용해서 삭제
printMembers();

// family라는 객체 안에 이렇게 다양한 종류의 데이터가 들어 가 있다.{address: "Seoul", members: {…}, addFamily: ƒ, getHeadCount: ƒ} 

30  단축 속성명
var로 미리 다 지정 해 놓고 한번에 객체에 넣는다.
    ex. var family = {address, members, addFamily, getHeadcount};
    
31  속성 계산명
동적으로 객체 속성 생성
예시) var obj={};
      for (var i = 0; i<4; i++){
        obj["key"+i]=i;
        }
대괄호 안이 키의 이름을 만드는 내용이다.

32  비구조화 할당
-객체 비구조화 할당
    중괄호 이용, 객체 내용을 이용해서 새로운 변수와 값 할당을 빠르게 한다.
-배열 비구조화 할당
    대괄호 이용, var[]=xxxxx  <= 여기 뒷부분에 뭐가 오는지를 잘 봐야 할 것 같다.

33  Symbol
Symbol() 함수 이용해서 생성 가능.
생성 때 마다 고유한 값을 생성하기 때문에 같은 스트링으로 만들어도 불일치함
객체의 키로 사용 가능
하지만 for-in 루프 통해 키를 가져올 수 없다.
키 반환 메소드를 이용해도 가져올 수 없다.

34  함수
function 함수 이름 (매개 변수 목록){
    함수 실행부
    }
    
함수 만드는 법
-함수 표현식
var a = function() ~
-함수 선언문 (일반적)
function a () { ~

35  예외 처리하기
throw만 사용 할 경우
if () throw "a" ;
여기서 오류가 발생할 경우 오류 정보와 a 를 출력

try-catch-finally 이용 시
try로 감싸진 부분이 에러를 발생 시킬 때,
위의 오류정보가 catch에 전달되며 a 출력,
그리고 finally 블록은 무조건 실행된다 ( close 등으로 이용)

36  arguments 객체
https://boycoding.tistory.com/21
함수를 호출했을 때 input 값을 전달 인자(argument)라고 하는데, js에서는 함수가 선언 될 때의 매개 변수의 개수와 전달 인자의 개수가 달라도 함수를 처리할 수 있다.
이 때 이용하는 것이 arguments 객체이다.
전달인자를 배열과 유사하게 객체로 만들어 놓은 것인데, 이것에 length 메소드를 이용해서 길이를 비교하여 매개변수보다 길이가 짧으면 남는 매개변수들은 undefined 처리되고,
길이가 길면 그것들은 무시된다.
주의해야 될 점은 arguments객체는 배열과 '유사'할 뿐이기 때문에 length 메소드 외에는 동작하지 않는다.

37  함수 기본 매개 변수 처리
default 매개변수를 설정하여 인자값이 전달 되지 않았을 때의 값을 미리 설정 해 놓는다.
/* 예시
function drawChart ( width = 200 , height = 400 ) {
    console.log(`${width}* ${height} 차트를 그립니다.`);
}
이 때 인자가 1개 들어온다면 width만 받고 height는 기본값으로 처리된다.
*/

38  함수 나머지 매개변수 이해하기
매개변수의 length보다 많은 개수의 인자가 전달 됐을 때,
넘치는 것들에 대한 정의를 가능하게 한다.
나머지 매개변수는 배열이다.
// function(parameter,...restParameter) ~~
// ...연산자와 함께 사용된다.

39  스코프 이해하기
스코프 = 유효 범위
전역변수 <-> 지역변수
'그니까 변수 이용시에 어디서 선언됐는지 잘 보고 유효한지 잘 체크해라.'

40  함수 호이스팅
'한 마디로 함수 호출 이후에도 선언해도 된다!'
'그런데 표현식으로 하면 호이스팅 잘 안되니까 선언문을 사용하자.'

41  let
let으로 선언하면 해당 블록 안에서만 호출 가능.
let과 호이스팅이 충돌 할 수 있다.

42  const
let과 마찬가지로 블록 단위로 효용이 있음. 상수이므로 재할당은 불가능하다.
일반적으로 대문자로 작성한다.
객체를 정의 했을 때, 불변 객체는 아니기 때문에 내부는 수정가능하지만,
새로운 객체 할당은 불가능하다.

★★★43  스코프 체인
실행 컨테스트 Execution Context
렉시컬 환경 Lexical Environment
    -환경 레코드
    -외부 렉시컬 환경
'일단 '식별자'를 찾기 위해 상위 단위로 탐색하는 체인'이라고 이해 해 두자.'

★★★★★44 클로저
'내부 함수가 외부 함수를 참조할 때 쓰이는 개념...'

45  객체 속성 기술자
객체들은 객체의 속성들의 정보를 담은 객체인 '정보 기술자'를 가지고 있다.
속성 기술자의 속성은 value, enumerable, writable, configurable이 있다.
이 속성 기술자를 만져서 속성의 성격을 변화시킬 수 있다.

46  get,set
접근 기술자 : 값에 접근하는 방식을 정의하는 객체
get은 속성에 접근, set은 값 대입 시 호출됨.

47  화살표 함수
형식[ 변수=인자 => 리턴값(표현식);]
혹은 [인자로 바로 넣어서 (인자 => {내용};)] 등등 많다.
-매개변수 1개 : 괄호 생략 가능
-매개변수 0개 or 2개 이상 : 괄호 작성
-한 문장으로 작성 시 화살표 오른쪽 표현식이 return
-화살표 함수 코드 블록 지정 시 반환하고자 하는 값에 return 안쓰면 undefined 반환됨.

------------------------------------------------------------------------------------------------------------------------------------

54 this까지 공부했는데
이 책은 아무리 봐도
초심자에게 쓰레기 같은 책이다.
유데미로 강좌 질러야겠다.
나중에 얼마나 쓰레기 같은 책인지 리뷰를 해봐야겠다.
개 빡친다.
