
'use strict';

// //coding challenge
// const game = {
//   team1: 'Bayern Munich',
//   team2: 'Borrussia Dortmund',
//   players: [
//     [
//       'Neuer',
//       'Pavard',
//       'Martinez',
//       'Alaba',
//       'Davies',
//       'Kimmich',
//       'Goretzka',
//       'Coman',
//       'Muller',
//       'Gnarby',
//       'Lewandowski',
//     ],
//     [
//       'Burki',
//       'Schulz',
//       'Hummels',
//       'Akanji',
//       'Hakimi',
//       'Weigl',
//       'Witsel',
//       'Hazard',
//       'Brandt',
//       'Sancho',
//       'Gotze',
//     ],
//   ],
//   score: '4:0',
//   scored: ['Lewandowski', 'Gnarby', 'Lewandowski',
//     'Hummels'],
//   date: 'Nov 9th, 2037',
//   odds: {
//     team1: 1.33,
//     x: 3.25,
//     team2: 6.5,
//   },
// };
// const [players1, players2] = [...game.players];  //아래의 것과 결과가 같다.
// const [players3, players4] = game.players;
// console.log(players1, players2)
// console.log(players3, players4);
// const [gk, ...fieldPlayers] = players1;
// const allPlayers = [...players1, ...players2];
// const players1Final = [...players1, "Thiago", "Coutinho", "Perisic"];
// const { team1: team1, x: draw, team2: team2 } = game.odds;  //x랑 draw 순서. 원본:새변수명
// const printGoals = function (...scoredPlayers) {

//   let i = 0;
//   for (i = 0; i < scoredPlayers.length; i++) {
//     console.log(scoredPlayers[i]);
//   }
//   console.log(scoredPlayers.length);

// }
// printGoals('Lewandowski', 'Gnarby', 'Lewandowski',
//   'Hummels');
// console.log(team1, draw, team2);
// console.log(game.team1);

const weekdays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
const openingHours = {
  thu: {  //enhanced object literals(3)
    open: 12,
    close: 22,
  },
  fri: {
    open: 11,
    close: 23,
  },
  sat: {
    open: 0, // Open 24 hours
    close: 24,
  }
};

const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],

  //es6 enhanced object literals(1)
  openingHours,

  order(starterIndex, mainIndex) { //enhanced object literals(2)
    return [this.starterMenu[starterIndex],
    this.mainMenu[mainIndex]];
  },

  //immediate destructuring argument는 하나의 object인데, 알아서 4개의 argument로 destructuring 해서 실행했다.
  orderDelivery: function ({ starterIndex = 1, mainIndex = 0, time = "20:00", address }) {
    console.log(`Order received! ${this.starterMenu[mainIndex]} will be delivered to ${address} at ${time}.`)

  },

  orderPasta: function (ing1, ing2, ing3) {
    console.log(`here is your delicious pasta with ${ing1},${ing2},${ing3}`);
  },

  orderPizza: function (mainIngredient, ...otherIngredients) {
    console.log(mainIngredient);
    console.log(otherIngredients);
  },

};

// if (restaurant.openingHours && restaurant.openingHours.fri.open) {
//   console.log(restaurant.openingHours.fri.open);

//   // WITH optional chaining (싸지방 vscode에서 적용안댐!)
//   console.log(restaurant.openingHours.mon.open);

// const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];

// for (const item of menu) console.log(item);

// for (const [i, el] of menu.entries()) {
//   console.log(`${i + 1}: ${el}`);
// }


        // ///////////////////////////////////////Nullish Coalescing Operator
        // // restaurant.numGuest = 0;
        // const guests = restaurant.numGuest || 10;
        // console.log(guests);






        ///////////////////////////////////////short-circuiting
        //Use ANY data type, return ANY data type, short-circuiting
        // console.log(3 || "Jonas");
        // console.log('' || "jonas");
        // console.log(true || 0);
        // console.log(undefined || null);

        // console.log(undefined || 0 || '' || "Hello" || 23 || null);

        // const guests1 = restaurant.numGuest ? restaurant.numGuest : 10;
        //numguest가 존재하면 guests1은 restaurant.numGuest이고 아니면 10. 여기서 restaurant.numGuest
        //는 undefined이기 때문에 false라서 10이 할당된다.
        //주의할 점은 restaurant.numGuest가 0으로 할당되어 있다면 이건 원하는 대로 작동하지 않는다.

        // const guests2 = restaurant.numGuest || 10;
        //똑같은 결과이지만 훨씬 간단하다.

        // console.log("---------And--------");
        // console.log(0 && "Jonas");
        // console.log(7 && "Jonas");

        // if (restaurant.orderPizza) {
        //   restaurant.orderPizza("mushrooms", "spinach");
        // };

        // restaurant.orderPizza && restaurant.orderPizza("mushrooms", "spinach");




        // restaurant.orderDelivery({
        //   time: '22:30',
        //   address: 'Via del sole,21',
        //   mainIndex: 2,
        //   starterIndex: 2,
        // });

        // restaurant.orderDelivery({
        //   address: "via del sole,21",
        //   starterIndex: 1,
        // });

        // const arr = [2, 3, 4];
        // const a = arr[0];
        // const b = arr[1];
        // const c = arr[2];

        // const [x, y, z] = arr; //new
        // console.log(x, y, z);

        // let [main, , secondary] = restaurant.categories;  //new
        // console.log(main, secondary);

        // // const temp = main;             //manual swaping
        // // main = secondary;
        // // secondary = temp;
        // // console.log(main, secondary);

        // [main, secondary] = [secondary, main];  //new
        // console.log(main, secondary);

        // const [starter, mainCourse] = restaurant.order(2, 0);
        // console.log(starter, mainCourse);

        // const nested = [2, 4, [5, 6]];
        // // const [i, , j] = nested;
        // // console.log(i, j)
        // const [i, , [j, k]] = nested;
        // console.log(i, j, k);

        // // Defualt values
        // const [p = 1, q = 1, r = 1] = [8, 9];
        // console.log(p, q, r);
        // //////////////////////////////////////////////////////////

        // //이름 지정 안하고 가져오기. 순서는 상관 없음
        // const { name, openingHours, categories } = restaurant;
        // console.log(name, openingHours, categories);

        // //변수명 새로 지정하면서 값 가져오기. 형식주의(가져오는 요소: 새 변수명)
        // const { name: restaurantName, openingHours: hours, categories: tags } = restaurant;
        // console.log(restaurantName, hours, tags);

        // //디폴트 값 설정하기. 여기서는 메뉴라는 요소가 없으면 빈 배열을 지정하도록 한 것.
        // const { menu = [], starterMenu: starters = [] } = restaurant;
        // console.log(menu, starters);

        // //mutating variables
        // let a = 111;
        // let b = 999;
        // const obj = { a: 23, b: 7, c: 14 };

        // // let { a: aa, b: bb, c: cc } = obj; //고전적 스와핑?
        // // a = aa;
        // // b = bb;

        // ({ a, b } = obj);  //간단한 스와핑
        // console.log(a, b);

        // //nested objects
        // const { fri: { open: openh, close: closeh } } = openingHours;
        // console.log(openh, closeh);

        // const arr = [7, 8, 9, [10, 11, 12]];
        // const badNewArr = [1, 2, arr[0], arr[1], arr[2]];

        // console.log(badNewArr);

        // const newArr = [1, 2, ...arr];
        // console.log(typeof newArr);
        // console.log(...newArr);

        // const newMenu = [...restaurant.mainMenu, 'Gnocci'];
        // console.log(newMenu);

        // // copy array
        // const mainMenuCopy = [...restaurant.mainMenu];

        // // join 2 arrays
        // const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];
        // console.log(menu);

        // // Iterables: arrays, strings, maps, sets. NOT objects
        // const str = "jonas";
        // const letters = [...str, ' ', 'S.'];
        // console.log(letters);
        // console.log(...str);

        // //real-world examples
        // // const ingredients = [prompt('let\'s make pasta! Ingredient1?'),
        // // prompt('let\'s make pasta! Ingredient2?'),
        // // prompt('let\'s make pasta! Ingredient3?')];
        // // console.log(ingredients);

        // // restaurant.orderPasta(...ingredients);

        // // Objects
        // const newRestarant = { foundedIn: 1998, ...restaurant, founder: 'guiseppe' }
        // console.log(newRestarant);

        // const restaurantCopy = { ...restaurant };
        // restaurantCopy.name = "Ristorante Rome";
        // console.log(restaurantCopy.name);
        // console.log(restaurant.name); //비파괴적인 방법



        //1) destructuring
        // SPREAD , becuase on Right side of =
        // const arr = [1, 2, ...[3, 4,]];

        // //REST , because on Left side of =
        // const [a, b, ...others] = [1, 2, 3, 4, 5];
        // console.log(a, b, others);

        // const [pizza, , risotto, ...otherFood] = [...restaurant.mainMenu, ...restaurant.starterMenu]
        // console.log(pizza, risotto, otherFood);

        // //objects
        // const { sat, ...weekdays } = restaurant.openingHours;
        // console.log(weekdays);

        // //2) functions
        // const add = function (...numbers) {
        //   let sum = 0;
        //   for (let i = 0; i < numbers.length; i++) sum += numbers[i];
        //   console.log(sum);
        // }

        // add(2, 3);
        // add(5, 3, 7, 2);
        // add(8, 2, 5, 3, 2, 1, 4);

        // const x = [23, 5, 7];
        // add(...x); //x에서 ...x 갈 때 unpack, ...numbers에서 pack 해서 array 형식으로 받아들임

        // restaurant.orderPizza('mushrooms', 'onion', 'olives', 'spinach');
