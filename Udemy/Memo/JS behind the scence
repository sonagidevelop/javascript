////////////////////scoping
음...이해한 것과 크게 다르지는 않았는데
reassigning outer scope's variable 이 부분이 신기했다.
output을 그냥 declare 하는거랑 const놓고 declare하는거랑 결과가 아예 달랐다.
const놓고 declare하면 같은 이름이지만 아예 다른 변수인 것이 신기했다.

////////////////////호이스팅
var me = 'jinhyeok';  //undefined로 hoist된다.
let job = 'soldier';   //ReferenceError뜬다.
const year = 1998;

//functions
// console.log(addDecl(2, 3));
// console.log(addExpr(2, 3)); //ReferenceError 인데 var로 놓고 하면 함수가 아니라고 한다.
// console.log(addArrow(2, 3)); // 이유는 hoisted면 undefined이기 때문이다

// function addDecl(a, b) {
//     return a + b;
// }

// const addExpr = function (a, b) { //ReferenceError
//     return a + b;
// }

// var addArrow = (a, b) => a + b; //TypeError

//examples

if (!numProducts) deleteShoppingCart(); //hoisting하면 undefined라서 falsy value임.

var numProducts = 10;

function deleteShoppingCart() {
    console.log('all products deleted');
}

var x = 1;
let y = 2;
const z = 3;

console.log(z === window.z);
//variables declared with var create a property on window.


///////////////////////////////// this 키워드
THIS KEYWORD/VARIABLE
:special variable that is created for every execution context(every function).Takes the value of (points to)
the "owner" of the function in which the this keyword is used.
execution context(모든 함수)에게 생성되는 특별한 변수. this키워드가 쓰이는 함수의 "주인"의 값을 가진다(가리킨다).

this is not static. It depends on how the function is called, and its value is only assigned when the function 
is actually called.
이건 정적이지 않다. 이건 함수가 어떻게 호출되느냐에 의존하며, 이것의 값은 오직 실제로 호출됐을 때만 할당된다.

**4 Ways of calling functions
    -method:this=<object that is calling the method>메소드를 호출하는 함수가 this이다.
    -simple call:this=undefined(in strict mode. else: window)
    -arrow functions: this =<this of surrounding function> (lexical this)부모 함수의 this가 this이다.
    -Event Listener: this=<DOM element that the handler is attatched to>핸들러가 붙어있는 dom 요소가 this이다.
    -new,call,apply,bind도 있는데 나중에 배움.
    
this does not point to the function itself, and also not the variable environment!
this는 함수 자체를 가리키는 것이아니며, 변수 환경을 가리키는 것도 아니다.





const calcAge = function (birtyYear) {
    console.log(2020 - birtyYear);
    console.log(this);
}

calcAge(1998);

const calcAgeArrow = birtyYear => {
    console.log(2020 - birtyYear);
    console.log(this);
}

calcAgeArrow(1990);

const jonas = {
    year: 1991,
    calcAge: function () {  //method에서의 this는 attatching object다.
        console.log(this);
        console.log(2037 - this.year);
    }
};
jonas.calcAge();

const matilda = {
    year: 2017,
};

matilda.calcAge = jonas.calcAge;  //method borrowing
matilda.calcAge();

const f = jonas.calcAge; //이렇게하면 simple function call임.
f();


////////////////////////regular functions vs arrow functions
this가 어떻게 달라지는지 3가지 경우를 복습.
1.메소드에서는 호출한 객체가 this.
2.화살표 함수에서는 부모 요소의 this를 받음.
3.일반 호출시에는 undefined.

2번을 이용해서 객체 안의 메소드 안의 함수를 작성할 때, 화살표 함수를 이용해서 메소드의 this를 상속받을 수 있다.
"아 this를 생각할 땐 호출될 때를 생각하면 되겠다."

++++++ arguments keyword.
            const addExpr = function (a, b) {
                console.log(arguments);
                return a + b;
            };
            addExpr(2, 5);
            addExpr(2, 5, 8, 12);

            var addArrow = (a, b) => {
                console.log(arguments);
                return a + b;     //1줄 이상의 코드를 작성하면 return을 explicitly.
            }

            addArrow(2, 5, 8);
화살표 함수에서는 arguments를 받을 수 없다.

//////////////////////////Primivite Types vs Reference Types
primitive types의 메모리 사용 방식
변수가 메모리 주소, 주소에 따른 값을 가짐.
어떤 변수에 새로 값을 할당 할 경우 새로운 메모리 주소 할당.
콜 스택 안에서만 과정이 이루어짐.

reference types의 메모리 사용 방식
변수는 주소를 가지고 있고 주소의 값으로 heap data 안에 있는 data의 주소를 가짐.
따라서 변수에 새로운 값을 할당하면 heap data의 값이 변경되고, call stack 안에서 참조하는 주소는 변하지 않음.
그래서 const내부의 값을 변경 할 수 있는 것임.
        //Primitive Types
        let lastName = "Williams";
        let oldLastName = lastName;
        lastName = "Davis"; //새로운 메모리 생성
        console.log(lastName, oldLastName);

        //Reference Types
        const jessica = {
            firstName: "Jessica",
            lastName: 'Williams',
            age: 27,
        }

        const marriedJessica = jessica;
        marriedJessica.lastName = "Davis";
        console.log("Before marriage:", jessica);
        console.log('After marriage:', marriedJessica);

        //Copying objects
        const jessica2 = {
            firstName: "Jessica",
            lastName: 'Williams',
            age: 27,
            family: ['Alice', 'Bob'],
        }

        const jessicaCopy = Object.assign({}, jessica2);  //object copying method (shallow)
        jessicaCopy.lastName = "Davis";

        jessicaCopy.family.push('Mary');
        jessicaCopy.family.push('John');
        console.log("Before marriage:", jessica2);
        console.log('After marriage:', jessicaCopy);
