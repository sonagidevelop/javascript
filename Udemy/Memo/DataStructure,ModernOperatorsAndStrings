///////////Destructuring Arrays
Destructuring 이란 구조 분해 할당.

여러 개의 변수에 서로 다른 값을 동시에 할당 할 때 우리는 destructuring을 쓸 수 있다.
스와핑을 할 때 임시 변수를 사용하는 경우가 일반적인데,
[a,b]=[b,a]이런 식으로 쉽고 간단하게 임시 변수 없이 할 수 있다.
물론 함수의 return 값 여러개를 동시에 할당 받을 수 도 있다.
또한 array 속의 array 즉 nested 일 지라도 가능하다.
디폴트 값을 정해서 할당 받지 못한 값이 undefined 되는 것도 방지 할 수 있다.

          'use strict';

          const restaurant = {
            name: 'Classico Italiano',
            location: 'Via Angelo Tavanti 23, Firenze, Italy',
            categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
            starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
            mainMenu: ['Pizza', 'Pasta', 'Risotto'],

            order: function (starterIndex, mainIndex) {
              return [this.starterMenu[starterIndex],
              this.mainMenu[mainIndex]];
            }
          };

          const arr = [2, 3, 4];
          const a = arr[0];
          const b = arr[1];
          const c = arr[2];

          const [x, y, z] = arr; //new
          console.log(x, y, z);

          let [main, , secondary] = restaurant.categories;  //new
          console.log(main, secondary);

          // const temp = main;             //manual swaping
          // main = secondary;
          // secondary = temp;
          // console.log(main, secondary);

          [main, secondary] = [secondary, main];  //new
          console.log(main, secondary);

          const [starter, mainCourse] = restaurant.order(2, 0);
          console.log(starter, mainCourse);

          const nested = [2, 4, [5, 6]];
          // const [i, , j] = nested;
          // console.log(i, j)
          const [i, , [j, k]] = nested;
          console.log(i, j, k);

          // Defualt values
          const [p = 1, q = 1, r = 1] = [8, 9];
          console.log(p, q, r);

////////////////////////////////Destructuring objects

                    'use strict';

                    const restaurant = {
                      name: 'Classico Italiano',
                      location: 'Via Angelo Tavanti 23, Firenze, Italy',
                      categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
                      starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
                      mainMenu: ['Pizza', 'Pasta', 'Risotto'],

                      openingHours: {
                        thu: {
                          open: 12,
                          close: 22,
                        },
                        fri: {
                          open: 11,
                          close: 23,
                        },
                        sat: {
                          open: 0, // Open 24 hours
                          close: 24,
                        },
                      },
                      order: function (starterIndex, mainIndex) {
                        return [this.starterMenu[starterIndex],
                        this.mainMenu[mainIndex]];
                      },

                      //immediate destructuring argument는 하나의 object인데, 알아서 4개의 argument로 destructuring 해서 실행했다.
                      orderDelivery: function ({ starterIndex = 1, mainIndex = 0, time = "20:00", address }) {
                        console.log(`Order received! ${this.starterMenu[mainIndex]} will be delivered to ${address} at ${time}.`)

                      }
                    };

                    restaurant.orderDelivery({
                      time: '22:30',
                      address: 'Via del sole,21',
                      mainIndex: 2,
                      starterIndex: 2,
                    });

                    restaurant.orderDelivery({
                      address: "via del sole,21",
                      starterIndex: 1,
                    });

                    // const arr = [2, 3, 4];
                    // const a = arr[0];
                    // const b = arr[1];
                    // const c = arr[2];

                    // const [x, y, z] = arr; //new
                    // console.log(x, y, z);

                    // let [main, , secondary] = restaurant.categories;  //new
                    // console.log(main, secondary);

                    // // const temp = main;             //manual swaping
                    // // main = secondary;
                    // // secondary = temp;
                    // // console.log(main, secondary);

                    // [main, secondary] = [secondary, main];  //new
                    // console.log(main, secondary);

                    // const [starter, mainCourse] = restaurant.order(2, 0);
                    // console.log(starter, mainCourse);

                    // const nested = [2, 4, [5, 6]];
                    // // const [i, , j] = nested;
                    // // console.log(i, j)
                    // const [i, , [j, k]] = nested;
                    // console.log(i, j, k);

                    // // Defualt values
                    // const [p = 1, q = 1, r = 1] = [8, 9];
                    // console.log(p, q, r);
                    // //////////////////////////////////////////////////////////

                    //이름 지정 안하고 가져오기. 순서는 상관 없음
                    const { name, openingHours, categories } = restaurant;
                    console.log(name, openingHours, categories);

                    //변수명 새로 지정하면서 값 가져오기. 형식주의(가져오는 요소: 새 변수명)
                    const { name: restaurantName, openingHours: hours, categories: tags } = restaurant;
                    console.log(restaurantName, hours, tags);

                    //디폴트 값 설정하기. 여기서는 메뉴라는 요소가 없으면 빈 배열을 지정하도록 한 것.
                    const { menu = [], starterMenu: starters = [] } = restaurant;
                    console.log(menu, starters);

                    //mutating variables
                    let a = 111;
                    let b = 999;
                    const obj = { a: 23, b: 7, c: 14 };

                    // let { a: aa, b: bb, c: cc } = obj; //고전적 스와핑?
                    // a = aa;
                    // b = bb;

                    ({ a, b } = obj);  //간단한 스와핑
                    console.log(a, b);

                    //nested objects
                    const { fri: { open: openh, close: closeh } } = openingHours;
                    console.log(openh, closeh);

//////////////////////////////////////////////spread operator
...array를 통해 쉽게 배열의 요소들을 나열 할 수 있다. 또한 이게 쓰이는 위치에 따라 앞,뒤의 요소 순서도 조작할 수 있다.

iterables - not including objects
template literal에는 1개만


////////////////////////////////Rest Pattern
spread와 rest는 same syntax but exactly opposite (how it works)
rest pattern은 항상 마지막 element여야한다
... syntax는 결국 array로 pack이나 unpack한다.
value를 위한 것이냐, variable을 위한 것이냐 이게 rest와 spread의 사용을 결정짓는다.

////////////////////////////short-circuiting
&&이나 ||가 다양하게 쓰일 수 있다는 것을 배웠다.
||같은 경우에 첫번째가 true일 경우에 뒤의 것들은 볼 필요도 없기 때문에 바로 첫번 째 것 반환.
즉. 첫 번째 true 값 반환
&&같은 경우 첫번째가 false 일 경우에 뒤의 것들은 볼 필요도 없기 때문에 바로 첫 번째 것 반환.
즉. 첫 번째 false 값 반환.

||의 쓰임새 : 값이 없으면 default 값을 설정 할 때 쓰일 수 있다.
&&의 쓰임새 : 값이 존재하면 reassign을 쉽게 할 수 있다.

nullish coalesing operator
?? 
ES2020 내용이고, undefined나 null을 찾는다.

                    ///////////////////////////////////////Nullish Coalescing Operator
                    // restaurant.numGuest = 0;
                    const guests = restaurant.numGuest || 10;
                    console.log(guests);

                    const guestCorrect = restaurant.numGuest ?? 10;




                    ///////////////////////////////////////short-circuiting
                    //Use ANY data type, return ANY data type, short-circuiting
                    // console.log(3 || "Jonas");
                    // console.log('' || "jonas");
                    // console.log(true || 0);
                    // console.log(undefined || null);

                    // console.log(undefined || 0 || '' || "Hello" || 23 || null);

                    const guests1 = restaurant.numGuest ? restaurant.numGuest : 10;
                    //numguest가 존재하면 guests1은 restaurant.numGuest이고 아니면 10. 여기서 restaurant.numGuest
                    //는 undefined이기 때문에 false라서 10이 할당된다.
                    //주의할 점은 restaurant.numGuest가 0으로 할당되어 있다면 이건 원하는 대로 작동하지 않는다.

                    const guests2 = restaurant.numGuest || 10;
                    //똑같은 결과이지만 훨씬 간단하다.

                    // console.log("---------And--------");
                    // console.log(0 && "Jonas");
                    // console.log(7 && "Jonas");

                    // if (restaurant.orderPizza) {
                    //   restaurant.orderPizza("mushrooms", "spinach");
                    // };

                    // restaurant.orderPizza && restaurant.orderPizza("mushrooms", "spinach");
                    
                    
//coding challenge
'use strict';

                    //coding challenge
                    const game = {
                      team1: 'Bayern Munich',
                      team2: 'Borrussia Dortmund',
                      players: [
                        [
                          'Neuer',
                          'Pavard',
                          'Martinez',
                          'Alaba',
                          'Davies',
                          'Kimmich',
                          'Goretzka',
                          'Coman',
                          'Muller',
                          'Gnarby',
                          'Lewandowski',
                        ],
                        [
                          'Burki',
                          'Schulz',
                          'Hummels',
                          'Akanji',
                          'Hakimi',
                          'Weigl',
                          'Witsel',
                          'Hazard',
                          'Brandt',
                          'Sancho',
                          'Gotze',
                        ],
                      ],
                      score: '4:0',
                      scored: ['Lewandowski', 'Gnarby', 'Lewandowski',
                        'Hummels'],
                      date: 'Nov 9th, 2037',
                      odds: {
                        team1: 1.33,
                        x: 3.25,
                        team2: 6.5,
                      },
                    };
                    const [players1, players2] = [...game.players];  //아래의 것과 결과가 같다.
                    const [players3, players4] = game.players;
                    console.log(players1, players2)
                    console.log(players3, players4);
                    const [gk, ...fieldPlayers] = players1;
                    const allPlayers = [...players1, ...players2];
                    const players1Final = [...players1, "Thiago", "Coutinho", "Perisic"];
                    const { team1: team1, x: draw, team2: team2 } = game.odds;  //x랑 draw 순서. 원본:새변수명
                    const printGoals = function (...scoredPlayers) {

                      let i = 0;
                      for (i = 0; i < scoredPlayers.length; i++) {
                        console.log(scoredPlayers[i]);
                      }
                      console.log(scoredPlayers.length);

                    }
                    printGoals('Lewandowski', 'Gnarby', 'Lewandowski',
                      'Hummels');
                    console.log(team1, draw, team2);
                    console.log(game.team1);

아직 헷갈린다. array와 object destructuring이랑 spread, rest 어렵다.
///////////////for of loop
파이썬처럼 for 문을 쓰는거라고 생각된다.
//////////////////////////es6 enhanced object literals
1.밖의 객체를 property로 넣고 싶을 때, 그냥 객체 이름만 넣으면 된다.
2.함수인 property를 만들 때, order(a,b){~  이런식으로 호출하는 것 마냥 써도 된다. 단 , 를 빼먹지 않아야 할 것.
3.property name을 computed form으로 설정 할 수 있다.

//////////////////////////////////optional chaning은 es버전이 높아서 싸지방에서 안된다.
