/*
let js = "amazing";
console.log(40 + 8 + 23 - 10);

console.log("Jonas");
console.log(23);

let firstName = "Matilda";

console.log(firstName);
console.log(firstName);
console.log(firstName);

// Variable name conventions
let jonas_matilda = "jm";
let $function = 27;

let person = "jonas";
let PI = 3.1415;

let myFirstJob = "Coder";
let myCurrentJob = "Teacher";

let job1 = "programmer";
let job2 = "teacher";

console.log(myFirstJob);
*/

/*var job = 'programmer';
job = 'teacher';

console.log(job);
*/

//Coding Challenge #1
/*
let markMass = 95;
let markHeight = 1.88;
let johnMass = 85;
let johnHeight = 1.76;

let markBMI = markMass / markHeight ** 2;
let johnBMI = johnMass / johnHeight ** 2;

let markHigherBMI = (markBMI > johnBMI);
console.log(markHigherBMI);
*/

/*
//Driver's license approval system
let userAge = 17;
let licenseAge = 20;
let differenceAge = userAge - licenseAge;

if (differenceAge >= 0) {
    console.log("You can try driver's license!")
} else {
    console.log(`you have ${differenceAge * -1}years left for driver's license.`)
}
*/
/*
//Coding Challenge #2
let markMass = 95;
let markHeight = 1.88;
let johnMass = 85;
let johnHeight = 1.76;

let markBMI = markMass / markHeight ** 2;
let johnBMI = johnMass / johnHeight ** 2;
let markBMIFixed = markBMI.toFixed(1);
let johnBMIFixed = johnBMI.toFixed(1);

let markHigherBMI = (markBMI > johnBMI);

if (markHigherBMI) {
    console.log(`Mark's BMI(${markBMIFixed}) is higher than John's(${johnBMIFixed})!!`)
} else {
    console.log(`John's BMI(${johnBMIFixed}) is higher than Mark's(${markBMIFixed})!!`)
}
*/
/*
'use strict';

let hasDriversLicense = false;
const passTest = true;

if (passTest) hasDriversLicense = true;
if (hasDriversLicense) console.log("i can drive:D");
*/

/*
function logger() {
    console.log("My name is Jonas");
}



function fruitProcessor(apples, oranges) {
    console.log(apples, oranges);
    const juice = `Juice with ${apples} apples and ${oranges} oranges.`;
    return juice
}

let juiceCount = fruitProcessor(5, 0);
console.log(juiceCount);

const num = Number('23');
console.log(typeof '23');
console.log(typeof Number('23'));
*/
/*
function calcAge1(birthYear) {
    return 2037 - birthYear;
}

const age1 = calcAge1(1991);
console.log(age1);

const calcAge2 = function (birthYear) {
    return 2037 - birthYear;
}
const age2 = calcAge2(1991);
console.log(age2);
*/
/*
const calcAge3 = birthYear => 2037 - birthYear;
const age3 = calcAge3(1991);
console.log(age3);
*/
/*const yearsuntilRetire = (birthYear, firstName) => {
    const age = 2020 - birthYear
    const retire = 65 - age;
    return `${firstName} retires in ${retire}years.`;
}

console.log(yearsuntilRetire(1998, 'jin'));
*/
/*
function cutFruitPieces(fruit) {
    return fruit * 4;
}



function fruitProcessor(apples, oranges) {
    const applePieces = cutFruitPieces(apples);
    const orangePieces = cutFruitPieces(oranges);

    console.log(apples, oranges);
    const juice = `Juice with ${applePieces} apples and ${orangePieces} oranges.`;
    return juice
}

console.log(fruitProcessor(2, 3));
*/

//Coding Challenge 2-1
/*
const calcAverage = (sc1, sc2, sc3) => (sc1 + sc2 + sc3) / 3;

const dolphinScore = calcAverage(85, 54, 41);
const koalaScore = calcAverage(23, 34, 27);

function checkWinner(avgDolphins, avgKoalas) {
    let winner;
    let winnerAvg;
    let loserAvg;
    if (avgDolphins >= avgKoalas * 2) {
        winner = "dolphins";
        winnerAvg = avgDolphins;
        loserAvg = avgKoalas;
        console.log(`${winner} win (${winnerAvg} vs. ${loserAvg})`);

    } else if (avgKoalas >= avgDolphins * 2) {
        winner = "koalas";
        winnerAvg = avgKoalas;
        loserAvg = avgDolphins;
        console.log(`${winner} win (${winnerAvg} vs. ${loserAvg})`);
    } else {
        console.log("nobody won!");
    }

}

checkWinner(dolphinScore, koalaScore);
*/
/*
const friends = ['Michael', 'Steven', 'Peter'];

friends[2] = 'Jay';
console.log(friends);

const jonas = ['schmedtmann', 2037 - 1991, 'teacher', friends];
console.log(jonas);

const calcAge = function (birthYear) {
    return 2037 - birthYear;
}

const years = [1990, 1967, 2002, 2010, 2018];
console.log(years);


const age1 = calcAge(years[0]);
console.log(age1);

const age2 = calcAge(years[1]);
console.log(age2);

const age3 = calcAge(years[4]);
console.log(age3);

const ages = [calcAge(years[0]), calcAge(years[1]), calcAge(years[4])];
console.log(ages);

const newYears = [];
for (i = 0; i < years.length; i++) {
    newYears[i] = calcAge(years[i]);
}

console.log(newYears);
*/
/*
const friends = ['Michael', 'Steven', 'Peter'];
const newFriends = friends.push('jay');
console.log(friends);
console.log(newFriends);

friends.unshift('john');
console.log(friends);

//removing

const poppedFreind = friends.pop();
console.log(friends);
console.log(poppedFreind);
const shiftedFriend = friends.shift();
console.log(shiftedFriend)

console.log(friends.indexOf('Steven'));
*/
/*
//cc2-2
const bills = [125, 555, 44];

function calcTip(billValue) {
    let tipValue;
    if (billValue >= 50 && billValue <= 300) {
        tipValue = billValue * 0.15;
        return tipValue;
    } else {
        tipValue = billValue * 0.2;
        return tipValue;
    }
}

let tips = [calcTip(bills[0]), calcTip(bills[1]), calcTip(bills[2])];
let total = [bills[0] + tips[0], bills[1] + tips[1], bills[2] + tips[2]];
console.log(tips);
console.log(total);

const calcTip = function (billValue) {
    return billValue >= 50 && billValue <= 300 ? bill * 0.15 : bill * 0.2;
}

*/
/*
const jin = {
    firstName: 'jin hyeok',
    lastName: 'Choi',
    age: 2020 - 1998,
    job: 'Soldier',
    friends: ['a', 'b', 'c']
};
*/
/*
console.log(jin);

console.log(jin.lastName);
console.log(jin['lastName']);

const nameKey = 'Name';
console.log(jin['first' + nameKey]);
console.log(jin['last' + nameKey]);
*/
/*
function loggingInterested() {
    const interestedIn = prompt('What do you want to know about jin? choose between firstName,...');
    if (jin[interestedIn]) {
        console.log(jin[interestedIn]);
    } else {
        console.log("wrong input!");
    }
}

loggingInterested();
*/
/*
jin.location = "Republic of Korea";
jin["github"] = "sonagideveloper";
console.log(jin);
*/
/*
jin.bestfriend = "michael";
const jinFriendCount = jin["friends"].length;
console.log(`Jin has ${jinFriendCount} friends, and his best friend is called ${jin["bestfriend"]}"`);*/
/*
const jin = {
    firstName: 'jin hyeok',
    lastName: 'Choi',
    birthYear: 1998,
    job: 'Soldier',
    friends: ['Michael', 'Peter', 'Steven'],
    hasDriversLicense: false,

    //calcAge: function (birthYear) {
    //    return 2020 - birthYear;
    //}

    //calcAge: function () {
    //    console.log(this);
    //    return 2020 - this.birthYear;
    //}

    calcAge: function () {
        this.age = 2020 - this.birthYear;
        return this.age;
    },

    getSummary: function () {
        return `${this.firstName} is a ${this.calcAge()}-year old ${this.job}. and he has ${this.hasDriversLicense ? 'a' : 'no'} driver's license.`
    }
};

console.log(jin.getSummary());
*/
/*
//Coding Challenge 2-3
const markProfile = {
    firstName: "Mark",
    lastName: "Miller",
    mass: 78,
    height: 1.69,
    calcBMI: function () {
        this.bmi = (this.mass / this.height ** 2);
        return this.bmi;
    }
};
const johnProfile = {
    firstName: "John",
    lastName: "Smith",
    mass: 92,
    height: 1.95,
    calcBMI: function () {
        this.bmi = (this.mass / this.height ** 2);
        return this.bmi;

    }
};

if (markProfile.calcBMI() > johnProfile.calcBMI()) {
    console.log(`${markProfile.firstName}'s BMI(${markProfile.calcBMI()}) is higher than ${johnProfile.firstName}'s(${johnProfile.calcBMI()})!`);
} else {
    console.log(`${johnProfile.firstName}'s BMI(${johnProfile.calcBMI()}) is higher than ${markProfile.firstName}'s(${markProfile.calcBMI()})!`);
}*/
/*
//for loop keeps running while condition is true
for (let rep = 1; rep <= 10; rep++) {
    console.log(`lifting weights repetition ${rep}`)
}
*/

/*
const jonasArray = [
    'Jonas',
    'Schmedtmann',
    2037 - 1991,
    'teacher',
    ['Michael', 'Peter', 'Steven']
];

for (i = 0; i < jonasArray.length; i++) {
    console.log(jonasArray[i], typeof jonasArray[i]);
}

const typeArray = [];
for (i = 0; i < jonasArray.length; i++) {
    typeArray.push(typeof jonasArray[i]);
}
console.log(typeArray);

const years = [1991, 2007, 1969, 2019];
const ages = [];

for (i = 0; i < years.length; i++) {
    ages.push(2020 - years[i]);
}
console.log(ages);
*/
// continue and break
/*
for (i = 0; i < jonasArray.length; i++) {
    if (typeof jonasArray[i] !== "string") continue;
    typeArray.push(jonasArray[i]);

}
console.log(typeArray);
*/
/*
for (i = 0; i < jonasArray.length; i++) {
    typeArray.push(jonasArray[i]);

    if (typeof jonasArray[i] === "number")
        break;

}
console.log(typeArray);
*/
/*
for (i = jonasArray.length - 1; i >= 0; i--) {
    console.log(i, jonasArray[i]);
}
*/
/*
const typeLift = ['a', 'b', 'c'];
for (i = 0; i < typeLift.length; i++) {
    for (j = 0; j < 5; j++) {
        console.log(`${typeLift[i]}를 ${j + 1}번 했음.`);
    }
}

for (i = 0; i < typeLift.length; i++) {
    console.log(`${typeLift[i]}운동중--------------------------------`)

    for (j = 0; j < 5; j++) {
        console.log(`${j + 1}번 했음.`);
    }
}
*/
/*
for (let rep = 1; rep <= 10; rep++) {
    console.log(`lifting weights repetition ${rep}`)
}
let rep = 1;
while (rep <= 10) {
    console.log(`lifting weights repetition ${rep}`);
    rep++;
}
*/
/*
let dice = Math.trunc(Math.random() * 6) + 1;
//console.log(dice);

while (dice !== 6) {
    dice = Math.trunc(Math.random() * 6) + 1;
    console.log(`you rolled ${dice}`);
}

*/

const bills = [22, 295, 176, 440, 37, 105, 10, 1100, 86, 52];
const tips = [];
const totals = [];
function calcTip(billValue) {
    billValue >= 50 && billValue <= 300 ? this.tip = billValue * 0.15 : this.tip = billValue * 0.2;
    return tip;
}
for (i = 0; i < bills.length; i++) {
    tips.push(calcTip(bills[i]));
}

for (i = 0; i < bills.length; i++) {
    totals.push(bills[i] + tips[i]);
}
console.log(totals);

function calcAverage(arr) {
    let addField = 0;
    for (i = 0; i < arr.length; i++) {
        addField = addField + arr[i];

    }
    this.average = addField / arr.length;
    return average
}

const billAverage = calcAverage(bills);
console.log(billAverage);
const totalAverage = calcAverage(totals);
console.log(totalAverage);  


looping arrays 부터

        'use strict';

        //coding challenge
        const game = {
          team1: 'Bayern Munich',
          team2: 'Borrussia Dortmund',
          players: [
            [
              'Neuer',
              'Pavard',
              'Martinez',
              'Alaba',
              'Davies',
              'Kimmich',
              'Goretzka',
              'Coman',
              'Muller',
              'Gnarby',
              'Lewandowski',
            ],
            [
              'Burki',
              'Schulz',
              'Hummels',
              'Akanji',
              'Hakimi',
              'Weigl',
              'Witsel',
              'Hazard',
              'Brandt',
              'Sancho',
              'Gotze',
            ],
          ],
          score: '4:0',
          scored: ['Lewandowski', 'Gnarby', 'Lewandowski',
            'Hummels'],
          date: 'Nov 9th, 2037',
          odds: {
            team1: 1.33,
            x: 3.25,
            team2: 6.5,
          },
        };
        const [players1, players2] = [...game.players];  //아래의 것과 결과가 같다.
        const [players3, players4] = game.players;
        console.log(players1, players2)
        console.log(players3, players4);
        const [gk, ...fieldPlayers] = players1;
        const allPlayers = [...players1, ...players2];
        const players1Final = [...players1, "Thiago", "Coutinho", "Perisic"];
        const { team1: team1, x: draw, team2: team2 } = game.odds;  //x랑 draw 순서. 원본:새변수명
        const printGoals = function (...scoredPlayers) {

          let i = 0;
          for (i = 0; i < scoredPlayers.length; i++) {
            console.log(scoredPlayers[i]);
          }
          console.log(scoredPlayers.length);

        }
        printGoals('Lewandowski', 'Gnarby', 'Lewandowski',
          'Hummels');
        console.log(team1, draw, team2);
        console.log(game.team1);


        // const restaurant = {
        //   name: 'Classico Italiano',
        //   location: 'Via Angelo Tavanti 23, Firenze, Italy',
        //   categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
        //   starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
        //   mainMenu: ['Pizza', 'Pasta', 'Risotto'],

        //   openingHours: {
        //     thu: {
        //       open: 12,
        //       close: 22,
        //     },
        //     fri: {
        //       open: 11,
        //       close: 23,
        //     },
        //     sat: {
        //       open: 0, // Open 24 hours
        //       close: 24,
        //     },
        //   },
        //   order: function (starterIndex, mainIndex) {
        //     return [this.starterMenu[starterIndex],
        //     this.mainMenu[mainIndex]];
        //   },

        //   //immediate destructuring argument는 하나의 object인데, 알아서 4개의 argument로 destructuring 해서 실행했다.
        //   orderDelivery: function ({ starterIndex = 1, mainIndex = 0, time = "20:00", address }) {
        //     console.log(`Order received! ${this.starterMenu[mainIndex]} will be delivered to ${address} at ${time}.`)

        //   },

        //   orderPasta: function (ing1, ing2, ing3) {
        //     console.log(`here is your delicious pasta with ${ing1},${ing2},${ing3}`);
        //   },

        //   orderPizza: function (mainIngredient, ...otherIngredients) {
        //     console.log(mainIngredient);
        //     console.log(otherIngredients);
        //   },

        // };



        // ///////////////////////////////////////Nullish Coalescing Operator
        // // restaurant.numGuest = 0;
        // const guests = restaurant.numGuest || 10;
        // console.log(guests);






        ///////////////////////////////////////short-circuiting
        //Use ANY data type, return ANY data type, short-circuiting
        // console.log(3 || "Jonas");
        // console.log('' || "jonas");
        // console.log(true || 0);
        // console.log(undefined || null);

        // console.log(undefined || 0 || '' || "Hello" || 23 || null);

        // const guests1 = restaurant.numGuest ? restaurant.numGuest : 10;
        //numguest가 존재하면 guests1은 restaurant.numGuest이고 아니면 10. 여기서 restaurant.numGuest
        //는 undefined이기 때문에 false라서 10이 할당된다.
        //주의할 점은 restaurant.numGuest가 0으로 할당되어 있다면 이건 원하는 대로 작동하지 않는다.

        // const guests2 = restaurant.numGuest || 10;
        //똑같은 결과이지만 훨씬 간단하다.

        // console.log("---------And--------");
        // console.log(0 && "Jonas");
        // console.log(7 && "Jonas");

        // if (restaurant.orderPizza) {
        //   restaurant.orderPizza("mushrooms", "spinach");
        // };

        // restaurant.orderPizza && restaurant.orderPizza("mushrooms", "spinach");




        // restaurant.orderDelivery({
        //   time: '22:30',
        //   address: 'Via del sole,21',
        //   mainIndex: 2,
        //   starterIndex: 2,
        // });

        // restaurant.orderDelivery({
        //   address: "via del sole,21",
        //   starterIndex: 1,
        // });

        // const arr = [2, 3, 4];
        // const a = arr[0];
        // const b = arr[1];
        // const c = arr[2];

        // const [x, y, z] = arr; //new
        // console.log(x, y, z);

        // let [main, , secondary] = restaurant.categories;  //new
        // console.log(main, secondary);

        // // const temp = main;             //manual swaping
        // // main = secondary;
        // // secondary = temp;
        // // console.log(main, secondary);

        // [main, secondary] = [secondary, main];  //new
        // console.log(main, secondary);

        // const [starter, mainCourse] = restaurant.order(2, 0);
        // console.log(starter, mainCourse);

        // const nested = [2, 4, [5, 6]];
        // // const [i, , j] = nested;
        // // console.log(i, j)
        // const [i, , [j, k]] = nested;
        // console.log(i, j, k);

        // // Defualt values
        // const [p = 1, q = 1, r = 1] = [8, 9];
        // console.log(p, q, r);
        // //////////////////////////////////////////////////////////

        // //이름 지정 안하고 가져오기. 순서는 상관 없음
        // const { name, openingHours, categories } = restaurant;
        // console.log(name, openingHours, categories);

        // //변수명 새로 지정하면서 값 가져오기. 형식주의(가져오는 요소: 새 변수명)
        // const { name: restaurantName, openingHours: hours, categories: tags } = restaurant;
        // console.log(restaurantName, hours, tags);

        // //디폴트 값 설정하기. 여기서는 메뉴라는 요소가 없으면 빈 배열을 지정하도록 한 것.
        // const { menu = [], starterMenu: starters = [] } = restaurant;
        // console.log(menu, starters);

        // //mutating variables
        // let a = 111;
        // let b = 999;
        // const obj = { a: 23, b: 7, c: 14 };

        // // let { a: aa, b: bb, c: cc } = obj; //고전적 스와핑?
        // // a = aa;
        // // b = bb;

        // ({ a, b } = obj);  //간단한 스와핑
        // console.log(a, b);

        // //nested objects
        // const { fri: { open: openh, close: closeh } } = openingHours;
        // console.log(openh, closeh);

        // const arr = [7, 8, 9, [10, 11, 12]];
        // const badNewArr = [1, 2, arr[0], arr[1], arr[2]];

        // console.log(badNewArr);

        // const newArr = [1, 2, ...arr];
        // console.log(typeof newArr);
        // console.log(...newArr);

        // const newMenu = [...restaurant.mainMenu, 'Gnocci'];
        // console.log(newMenu);

        // // copy array
        // const mainMenuCopy = [...restaurant.mainMenu];

        // // join 2 arrays
        // const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];
        // console.log(menu);

        // // Iterables: arrays, strings, maps, sets. NOT objects
        // const str = "jonas";
        // const letters = [...str, ' ', 'S.'];
        // console.log(letters);
        // console.log(...str);

        // //real-world examples
        // // const ingredients = [prompt('let\'s make pasta! Ingredient1?'),
        // // prompt('let\'s make pasta! Ingredient2?'),
        // // prompt('let\'s make pasta! Ingredient3?')];
        // // console.log(ingredients);

        // // restaurant.orderPasta(...ingredients);

        // // Objects
        // const newRestarant = { foundedIn: 1998, ...restaurant, founder: 'guiseppe' }
        // console.log(newRestarant);

        // const restaurantCopy = { ...restaurant };
        // restaurantCopy.name = "Ristorante Rome";
        // console.log(restaurantCopy.name);
        // console.log(restaurant.name); //비파괴적인 방법



        //1) destructuring
        // SPREAD , becuase on Right side of =
        // const arr = [1, 2, ...[3, 4,]];

        // //REST , because on Left side of =
        // const [a, b, ...others] = [1, 2, 3, 4, 5];
        // console.log(a, b, others);

        // const [pizza, , risotto, ...otherFood] = [...restaurant.mainMenu, ...restaurant.starterMenu]
        // console.log(pizza, risotto, otherFood);

        // //objects
        // const { sat, ...weekdays } = restaurant.openingHours;
        // console.log(weekdays);

        // //2) functions
        // const add = function (...numbers) {
        //   let sum = 0;
        //   for (let i = 0; i < numbers.length; i++) sum += numbers[i];
        //   console.log(sum);
        // }

        // add(2, 3);
        // add(5, 3, 7, 2);
        // add(8, 2, 5, 3, 2, 1, 4);

        // const x = [23, 5, 7];
        // add(...x); //x에서 ...x 갈 때 unpack, ...numbers에서 pack 해서 array 형식으로 받아들임

        // restaurant.orderPizza('mushrooms', 'onion', 'olives', 'spinach');

